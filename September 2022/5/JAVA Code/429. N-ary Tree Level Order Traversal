/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> list = new ArrayList<>();
        if(root==null) return list;
        ArrayDeque<Node> dq = new ArrayDeque<>();
        dq.add(root);
        while(dq.size()>0) {
            int s = dq.size();
            List<Integer> list1 = new ArrayList<>();
            for(int i=0;i<s;i++) {
                
                Node p = dq.pop();
                if(p==null) continue;
                list1.add(p.val);
                for(Node child : p.children) {
                        dq.add(child);
                }
                
            }
            list.add(list1);
        }
        return list;
    }
}

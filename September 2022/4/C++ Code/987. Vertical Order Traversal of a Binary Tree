/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,vector<int>> mp;
        queue<pair<TreeNode*,int>> dq;
        dq.push({root,0});
        while(dq.size()>0) {
            int s = dq.size();
            map<int,vector<int>> map1;
            
            for(int i=0;i<s;i++) {
                pair<TreeNode*,int> p = dq.front();
                dq.pop();
                if(p.first==NULL) continue;
                
                // vector<int> list;
                if(map1.find(p.second)==map1.end()) {
                    vector<int> list;
                    list.push_back(p.first->val);
                    map1.insert({p.second,list});
                } else {
                    map1[p.second].push_back(p.first->val);
                }
                
                dq.push({p.first->left,p.second-1});
                dq.push({p.first->right,p.second+1});
            }
            
            for(auto key : map1) {
                sort(key.second.begin(),key.second.end());
                for(int val : key.second) {
                    if(mp.find(key.first)==mp.end()) {
                        vector<int> list;
                        list.push_back(val);
                        mp.insert({key.first,list});
                    } else {
                        mp[key.first].push_back(val);
                    }
                }
            }
        }
        vector<vector<int>> ans;
        for(auto key : mp) {
            vector<int> ans1;
            for(int val : key.second) {
                ans1.push_back(val);
            }
            ans.push_back(ans1);
        }
        return ans;
    }
};
